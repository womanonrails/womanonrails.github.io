<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="pl"><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://womanonrails.com/pl/feed.xml" rel="self" type="application/atom+xml" /><link href="https://womanonrails.com/pl/" rel="alternate" type="text/html" hreflang="pl" /><updated>2021-06-23T17:02:18-04:00</updated><id>https://womanonrails.com/pl/feed.xml</id><title type="html">Woman on Rails</title><author><name>womanonrails</name></author><entry xml:lang="en"><title type="html">Czym różni się stub od mocka?</title><link href="https://womanonrails.com/pl/test-doubles" rel="alternate" type="text/html" title="Czym różni się stub od mocka?" /><published>2021-06-18T00:00:00-04:00</published><updated>2021-06-18T00:00:00-04:00</updated><id>https://womanonrails.com/pl/test-doubles</id><author><name>womanonrails</name></author><category term="testowanie" /><category term="tdd" /><category term="testy" /><category term="mock" /><category term="stub" /><summary type="html">W świecie testów istnieje wiele pojęć takich jak stub, mock czy dummy object. Może to być niejasne i mylące, co czym jest i gdzie tego należy użyć. Chcę usystematyzować te pojęcia w bardziej przystępny sposób. Ze względu jednak na rozbieżności dotyczące definicji tych terminów, w poniższym artykule przedstawię moje ich zrozumienie. Oczywiście będę bazować na wybranych źródłach zamieszczonych w bibliografii.</summary></entry><entry xml:lang="pl"><title type="html">Dynamiczna konfiguracja przy użyciu YAML w Ruby</title><link href="https://womanonrails.com/pl/dynamic-yaml-configuration" rel="alternate" type="text/html" title="Dynamiczna konfiguracja przy użyciu YAML w Ruby" /><published>2021-03-03T00:00:00-05:00</published><updated>2021-03-03T00:00:00-05:00</updated><id>https://womanonrails.com/pl/dynamic-yaml-configuration</id><author><name>womanonrails</name></author><category term="programowanie" /><category term="TIL" /><category term="Ruby" /><category term="Ruby on Rails" /><summary type="html">Od czasu do czasu programując w języku Ruby, a nawet częściej używając frameworka Ruby on Rails, potrzebuję stworzyć plik konfiguracyjny zawierający na przykład prywatne klucze do API. Oczywiście nie chcę tych danych śledzić w systemie kontroli wersji. Natomiast na dodanie ich do bazy danych jest jeszcze za wcześnie. W takiej sytuacji mogą pomóc zmienne środowiskowe zapisane w pliku .env. W tym przypadku jest jeszcze jeden mały haczyk. Chciałam by wszystkie dane były ustrukturyzowane w jednym pliku. Dlatego też użyłam kombinacji pliku YAML (akronim rekurencyjny od ang. YAML Ain’t Markup Language) ze zmiennymi środowiskowymi i ERB (Embedded Ruby). Oto jak wygląda to rozwiązanie.</summary></entry><entry xml:lang="en"><title type="html">Jak się skupić podczas programowania?</title><link href="https://womanonrails.com/pl/how-to-focus" rel="alternate" type="text/html" title="Jak się skupić podczas programowania?" /><published>2021-01-20T00:00:00-05:00</published><updated>2021-01-20T00:00:00-05:00</updated><id>https://womanonrails.com/pl/how-to-focus</id><author><name>womanonrails</name></author><category term="praca" /><category term="30devstories" /><category term="kariera" /><category term="zdrowie" /><summary type="html">W czasach łatwego dostępu do Internetu i ciągłych powiadomień mamy duży problem z utrzymaniem skupienia. Skupienie jest nam potrzebne by efektywnie wykonywać swoją pracę, ale też by osiągnąć flow. Jeden z najistotniejszych stanów, jakich możemy doświadczyć podczas pracy. Flow to stan umysłu, w którym jesteśmy w pełni zanurzeni i zaangażowani w bieżącą czynność. To bardzo pozytywne zjawisko, które nie tylko dodaje nam energii, ale też dostarcza satysfakcji z tego co robimy. Jest tylko jeden problem. Jak doświadczyć flow w świecie pełnym wszelkiego rodzaju “rozpraszaczy”. Dodatkowo w czasach gdy duża część z nas pracuje z domów. Chciałabym się podzielić z Tobą kilkoma trikami, które pomagają mi się skupić i częściej korzystać z flow.</summary></entry></feed>